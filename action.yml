name: 'Branch PR Sync Base'
description: 'Sync branches from a specified base branch (default: main) into open PRs.'

inputs:
  github_token:
    description: 'GitHub token for authentication.'
    required: true
  dry_run:
    description: 'If true, logs actions without merging/pushing.'
    required: false
    default: 'false'
  base_branch:
    description: 'The base branch for the sync operation (e.g., main, develop).'
    required: false
    default: 'main'
  require_auto_merge:
    description: 'Only sync PRs with auto-merge enabled.'
    required: false
    default: 'true'
  author_name:
    description: 'Git author name for the commit.'
    required: false
    default: 'github-actions'
  author_email:
    description: 'Git author email for the commit.'
    required: false
    default: 'github-actions@github.com'
  commit_message:
    description: 'Custom commit message for the sync commit.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Set up Git
      shell: bash
      run: |
        git config --global user.name "${{ inputs.author_name }}"
        git config --global user.email "${{ inputs.author_email }}"

    - name: Debug Input Parameters
      shell: bash
      run: |
        echo "üõ†Ô∏è Debugging Input Parameters:"
        echo "  - Base Branch: '${{ inputs.base_branch }}'"
        echo "  - Require Auto Merge: '${{ inputs.require_auto_merge }}'"
        echo "  - Dry Run: '${{ inputs.dry_run }}'"
        echo "  - Commit Message: '${{ inputs.commit_message }}'"
        echo "  - Author Name: '${{ inputs.author_name }}'"
        echo "  - Author Email: '${{ inputs.author_email }}'"

    - name: Fetch PRs
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "üöÄ Starting PR sync workflow..."
        echo "üîç Fetching PRs targeting '${{ inputs.base_branch }}'..."

        if [ "${{ inputs.require_auto_merge }}" = "true" ]; then
          filter='.[] | select(.autoMergeRequest != null) | "\(.number) \(.headRefName) \(.autoMergeRequest != null)"'
        else
          filter='.[] | "\(.number) \(.headRefName) true"'
        fi

        prs=$(gh pr list --state open --base "${{ inputs.base_branch }}" --json number,headRefName,autoMergeRequest --jq "$filter")

        if [ -z "$prs" ]; then
          echo "‚úÖ No PRs to update."
          # Create an empty pr_list.txt file to prevent errors in the next step
          touch pr_list.txt
          exit 0
        fi

        echo "$prs" > pr_list.txt

    - name: Sync PRs
      shell: bash
      run: |
        while read number branch auto_merge; do
          if [ "${{ inputs.require_auto_merge }}" = "true" ] && [ "$auto_merge" != "true" ]; then
            echo "üîÅ Skipping PR #$number: Auto-merge is not enabled."
            continue
          fi

          echo "üîÅ [$branch] PR #$number ‚Äî Syncing from ${{ inputs.base_branch }}..."

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "üö´ Dry run enabled ‚Äî the following actions would be taken for PR #$number on branch '$branch':"
            echo "  - Fetching origin/${{ inputs.base_branch }}"
            echo "  - Fetching origin/$branch"
            echo "  - Attempting merge"
            continue
          fi

          git fetch origin "${{ inputs.base_branch }}"
          git fetch origin "$branch"
          git checkout "$branch"

          # Attempt to merge
          if [ -z "${{ inputs.commit_message }}" ]; then
            git merge "origin/${{ inputs.base_branch }}" --no-edit || {
              echo "‚ö†Ô∏è Merge for PR #$number on branch '$branch' had conflicts. Skipping commit."
              git merge --abort || true
              continue
            }
          else
            git merge "origin/${{ inputs.base_branch }}" --no-edit -m "${{ inputs.commit_message }}" || {
              echo "‚ö†Ô∏è Merge for PR #$number on branch '$branch' had conflicts. Skipping commit."
              git merge --abort || true
              continue
            }
          fi

          git push origin HEAD
          if [ $? -eq 0 ]; then
            echo "‚úÖ [$branch] PR #$number ‚Äî Sync completed successfully!"
          else
            echo "‚ö†Ô∏è Push for PR #$number on branch '$branch' failed. Skipping."
          fi
        done < pr_list.txt

        if [ "${{ inputs.dry_run }}" = "true" ]; then
          echo "üö´ Dry run completed ‚Äî no changes were made."
        else
          echo "‚úÖ Sync completed successfully for all PRs!"
        fi

        echo "üîö Workflow finished."
