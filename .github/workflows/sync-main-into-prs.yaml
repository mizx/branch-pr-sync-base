name: Sync main into PRs

on:
  workflow_call:
    inputs:
      dry_run:
        description: 'If true, logs actions without merging/pushing.'
        required: false
        default: false
        type: boolean
      base_branch:
        description: 'The target branch for the sync operation (e.g., main, develop).'
        required: false
        default: 'main'
        type: string
      require_auto_merge:
        description: 'Only sync PRs with auto-merge enabled.'
        required: false
        default: true
        type: boolean
      author_name:
        description: 'Git author name for the commit.'
        required: false
        default: 'github-actions'
        type: string
      author_email:
        description: 'Git author email for the commit.'
        required: false
        default: 'github-actions@github.com'
        type: string
      commit_message:
        description: 'Custom commit message for the sync commit.'
        required: false
        type: string

jobs:
  sync-main-into-prs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Merge base into PR branches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ inputs.base_branch }}
          REQUIRE_AUTO_MERGE: ${{ inputs.require_auto_merge }}
          DRY_RUN: ${{ inputs.dry_run }}
          COMMIT_MESSAGE: ${{ inputs.commit_message }}
          AUTHOR_NAME: ${{ inputs.author_name }}
          AUTHOR_EMAIL: ${{ inputs.author_email }}
        run: |
          echo "üöÄ Starting PR sync workflow..."
          echo "üîç Fetching PRs targeting '$BASE_BRANCH'..."

          # Debug: Echo the input parameters
          echo "üõ†Ô∏è Inputs:"
          echo "  - Base Branch: $BASE_BRANCH"
          echo "  - Require Auto Merge: $REQUIRE_AUTO_MERGE"
          echo "  - Dry Run: $DRY_RUN"
          echo "  - Commit Message: '$COMMIT_MESSAGE'"
          echo "  - Author Name: $AUTHOR_NAME"
          echo "  - Author Email: $AUTHOR_EMAIL"

          if [ "$REQUIRE_AUTO_MERGE" = "true" ]; then
            filter='.[] | select(.autoMerge != null) | "\(.number) \(.headRefName) \(.autoMerge != null)"'
          else
            filter='.[] | "\(.number) \(.headRefName) true"'
          fi

          prs=$(gh pr list --state open --base "$BASE_BRANCH" --json number,headRefName,autoMerge --jq "$filter")

          if [ -z "$prs" ]; then
            echo "‚úÖ No PRs to update."
            exit 0
          fi

          git config --global user.name "$AUTHOR_NAME"
          git config --global user.email "$AUTHOR_EMAIL"

          echo "$prs" | while read number branch auto_merge; do
            if [ "$REQUIRE_AUTO_MERGE" = "true" ] && [ "$auto_merge" != "true" ]; then
              echo "üîÅ Skipping PR #$number: Auto-merge is not enabled."
              continue
            fi

            echo "üîÅ [$branch] PR #$number ‚Äî Syncing from $BASE_BRANCH..."

            if [ "$DRY_RUN" = "true" ]; then
              echo "üö´ Dry run enabled ‚Äî the following actions would be taken for PR #$number on branch '$branch':"
              echo "  - Fetching origin/$BASE_BRANCH"
              echo "  - Fetching origin/$branch"
              echo "  - Attempting merge"
              continue
            fi

            git fetch origin "$BASE_BRANCH"
            git fetch origin "$branch"
            git checkout "$branch"

            if [ -z "$COMMIT_MESSAGE" ]; then
              git merge "origin/$BASE_BRANCH" --no-edit
            else
              git merge "origin/$BASE_BRANCH" --no-edit -m "$COMMIT_MESSAGE"
            fi

            if [ $? -ne 0 ]; then
              echo "‚ö†Ô∏è Merge for PR #$number on branch '$branch' had conflicts. Skipping commit."
              continue
            fi

            git push origin HEAD
            if [ $? -eq 0 ]; then
              echo "‚úÖ [$branch] PR #$number ‚Äî Sync completed successfully!"
            else
              echo "‚ö†Ô∏è Merge conflict for PR #$number on branch '$branch'. Skipping."
            fi
          done

          if [ "$DRY_RUN" = "true" ]; then
            echo "üö´ Dry run completed ‚Äî no changes were made."
          else
            echo "‚úÖ Sync completed successfully for all PRs!"
          fi
          
          echo "üîö Workflow finished."